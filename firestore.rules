rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to categories.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows anyone to read the category information.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to products.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows anyone to read the product information.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to leads to admins only.
     * @path /leads/{leadId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @principle Enforces admin-only access for managing leads.
     */
    match /leads/{leadId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages orders for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow get, list: if isOwner(userId) || isAdmin();
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update, delete: if (isOwner(userId) || isAdmin());
     * @principle Enforces user-ownership for order management, admins have full access.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Manages product recommendations for a specific user.
     * @path /users/{userId}/recommendations/{recommendationId}
     * @allow get, list: if isOwner(userId) || isAdmin();
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update, delete: if (isOwner(userId) || isAdmin());
     * @principle Enforces user-ownership for recommendation management, admins have full access.
     */
    match /users/{userId}/recommendations/{recommendationId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

   /**
    * @description Manages order items, requires admin or user access for management.
    * @path /order_items/{orderItemId}
    * @allow get, list: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
    * @allow create: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
    * @allow update, delete: if isAdmin() && resource != null; // TODO: Implement user access based on the orderId relationship.
    * @principle Restricts access to order items for admins. User access needs implementation via orderId.
    */
    match /order_items/{orderItemId} {
      allow get: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
      allow list: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
      allow create: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
      allow update: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
      allow delete: if isAdmin(); // TODO: Implement user access based on the orderId relationship.
    }

    /**
     * @description Manages customer information.
     * @path /customers/{customerId}
     * @allow get, list: if isAdmin() || isOwner(customerId);
     * @allow create: if isSignedIn() && request.auth.uid == customerId;
     * @allow update, delete: if (isAdmin() || isOwner(customerId));
     * @principle Allows admins to manage customer data, and allows users to manage their own customer profile data.
     */
    match /customers/{customerId} {
      allow get: if isAdmin() || isOwner(customerId);
      allow list: if isAdmin() || isOwner(customerId);
      allow create: if isSignedIn() && request.auth.uid == customerId;
      allow update: if isAdmin() || isOwner(customerId);
      allow delete: if isAdmin() || isOwner(customerId);
    }

    /**
     * @description Grants admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow get, list: if false;
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @principle Admin role assignment is controlled by the existence of a document in this collection.
     */
    match /roles_admin/{userId} {
        allow get: if false;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(customerId) {
    return isSignedIn() && request.auth.uid == customerId;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}