
{
  "entities": {
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the e-commerce system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product's image.",
          "format": "uri"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Product)"
        },
        "stockQuantity": {
          "type": "number",
          "description": "The amount of stock available for this product."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "imageUrl",
        "categoryId",
        "stockQuantity"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category of products.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the category's image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl"
      ]
    },
    "Lead": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lead",
      "type": "object",
      "description": "Represents a lead captured through the website.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the lead."
        },
        "name": {
          "type": "string",
          "description": "Name of the lead."
        },
        "email": {
          "type": "string",
          "description": "Email address of the lead.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the lead."
        },
        "message": {
          "type": "string",
          "description": "Message from the lead."
        },
        "dateCreated": {
          "type": "string",
          "description": "Date when the lead was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "phone",
        "message",
        "dateCreated"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date when the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, completed)."
        },
        "shippingAddress": {
          "type": "string",
          "description": "Shipping address for the order."
        }
      },
      "required": [
        "id",
        "customerId",
        "orderDate",
        "totalAmount",
        "status",
        "shippingAddress"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the order item."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "unitPrice"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer in the e-commerce system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the customer."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the customer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the customer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "Address of the customer."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "address"
      ]
    },
    "Recommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Recommendation",
      "type": "object",
      "description": "Represents product recommendations for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the recommendation."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Recommendation)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N Recommendation)"
        },
        "recommendationDate": {
          "type": "string",
          "description": "Date when the recommendation was generated.",
          "format": "date-time"
        },
        "reason": {
          "type": "string",
          "description": "Reason for the recommendation (e.g., viewed history, similar items)."
        }
      },
      "required": [
        "id",
        "customerId",
        "productId",
        "recommendationDate",
        "reason"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores category information. Publicly readable.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information. Publicly readable.",
          "params": [
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/leads/{leadId}",
        "definition": {
          "entityName": "Lead",
          "schema": {
            "$ref": "#/backend/entities/Lead"
          },
          "description": "Stores leads captured from the website. Only accessible by admins.",
          "params": [
            {
              "name": "leadId",
              "description": "Unique identifier for the lead."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders for a specific user. Accessible by admins.",
          "params": [
            {
              "name": "orderId",
              "description": "Unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/recommendations/{recommendationId}",
        "definition": {
          "entityName": "Recommendation",
          "schema": {
            "$ref": "#/backend/entities/Recommendation"
          },
          "description": "Stores product recommendations for a specific user. Accessible by the user and admins.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user (customer)."
            },
            {
              "name": "recommendationId",
              "description": "Unique identifier for the recommendation."
            }
          ]
        }
      },
      {
        "path": "/order_items/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores items within an order. Requires admin or user access for management.",
          "params": [
            {
              "name": "orderItemId",
              "description": "Unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information. Potentially admin-managed or self-managed.",
          "params": [
            {
              "name": "customerId",
              "description": "Unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "role_admin",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Grants admin roles. Existence of a document grants admin privileges.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user who has admin privileges."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed for a modern e-commerce website with an admin dashboard, focusing on security, scalability, and maintainability.  It prioritizes Authorization Independence by avoiding `get()` calls in security rules through denormalization where necessary.  It utilizes structural segregation to ensure that collections contain documents with homogeneous security postures.\n\n**Key Structural Decisions & Justifications:**\n\n*   **/categories Collection:** Stores category information.  Publicly readable, so no specific authorization concerns beyond basic validation.\n*   **/products Collection:** Stores product information. Publicly readable, so no specific authorization concerns beyond basic validation.\n*   **/leads Collection:**  Stores leads captured from the website. Only accessible by admins. \n*   **/orders Collection:** Stores all orders in a single collection. Only admins can access these.\n*   **/users/{userId}/recommendations Collection:**  Each user has their AI-powered recommendations. Only the user or an admin can access these.\n*   **/order_items Collection:** Stores items within an order, with a reference to the order. Requires admin or user access for management.\n*   **/customers Collection:** Stores customer information, which could be admin-managed or self-managed.\n*   **/roles_admin/{userId} Collection:** Used to grant admin roles. Existence of a document at this path grants admin privileges to the user.\n\n**Authorization Independence (Denormalization):**\n\n*   The structure avoids hierarchical authorization dependencies (`get()` calls) in security rules. For example, access to orders is based on the `customerId` field and/or the path `/orders/{orderId}` directly, rather than requiring a `get()` on the customer document itself. The presence of a document in `/roles_admin/{userId}` grants admin rights, eliminating the need to read claims or user documents for role verification.\n\n**QAPs (Rules are Not Filters):**\n\n*   The segregation of data based on access control needs (e.g., using `/orders` for admin-only data) enables secure `list` operations.  Admins can list all leads and all orders, but public users cannot.\n\nThis design allows for clear and concise security rules that are easy to understand and maintain, promoting a secure and scalable application."
  }
}

    